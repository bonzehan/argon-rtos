/*!

@defgroup ar Argon RTOS
@brief Tiny embedded kernel.

The Argon RTOS provides the basic components required to have a useful embedded
operating system. It is almost entirely written in C++, with some assembler
for handling interrupts and context switching. The four basic objects that are
provided by Argon are:
    - Thread: thread class
    - Semaphore: counting semaphore
    - Mutex: mutually exclusive lock
    - Queue: message passing queue

In addition, there are several utility helper classes.

The internals of the operating system are split between the Ar::Kernel and Ar::Thread classes.
The scheduler and related data are static members of Ar::Thread. While kernel startup, interrupt
handlers, and related utilities are static members of Ar::Kernel. See the description for
Ar::Thread for details about the threading implementation.

@section Startup

There are several steps involved in starting the RTOS running.
    -   Create at least one thread and resume it. If a thread is not created
        then only the idle thread will exist and the system will do nothing.
    -   Finally call Ar::Kernel::run() to start the scheduler. This call will
        not return.

@todo Refactor the linked list management code into its own class. Right now
there are three copies of basically the same add/remove node code!

 */

/*!

@defgroup ar_port Argon Port
@ingroup ar
@brief Platform porting support for Argon.

 */
