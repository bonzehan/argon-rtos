/*!

@defgroup ar Argon RTOS
@brief Tiny, minimal embedded kernel.

The Argon RTOS provides the basic components required to have a useful embedded
operating system. It is almost entirely written in C++, with some assembler
for handling interrupts and context switching. The four basic objects that are
provided by Argon are:
    - Thread: thread class
    - Semaphore: counting semaphore
    - Mutex: mutually exclusive lock
    - Queue: message passing queue

In addition, there are several utility helper classes.

The Thread class actually encompasses most of the operating system within it.
The scheduler, interrupt handlers, and related utilities are all static members
of Thread. See the description for Thread for details about the threading
implementation.

There are several steps involved in starting the RTOS running.
    -   Call install_sysc_isr(). This function sets up the System Controller
        interrupt handler required by the RTOS to handle the tick timer.
    -   Create at least one thread and resume it. If a thread is not created
        then only the idle thread will exist and the system will do nothing.
    -   Finally call Thread::run() to start the scheduler. This call will
        not return.

@todo Refactor code to support multiple platforms.

@todo Refactor the linked list management code into its own class. Right now
there are three copies of basically the same add/remove node code!

 */

/*!

@defgroup ar_port Argon Port
@ingroup ar
@brief Platform porting support for Argon.

 */
