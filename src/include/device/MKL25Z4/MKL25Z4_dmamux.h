/*
 * Copyright (c) 2013, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL FREESCALE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */
/*
 * WARNING! DO NOT EDIT THIS FILE DIRECTLY!
 *
 * This file was generated automatically and any changes may be lost.
 */
#ifndef __HW_DMAMUX_REGISTERS_H__
#define __HW_DMAMUX_REGISTERS_H__

#include "regs.h"

/*
 * MKL25Z4 DMAMUX
 *
 * DMA channel multiplexor
 *
 * Registers defined in this header file:
 * - HW_DMAMUX_CHCFGn - Channel Configuration register
 *
 * - hw_dmamux_t - Struct containing all module registers.
 */

//! @name Module base addresses
//@{
#ifndef REGS_DMAMUX_BASE
#define HW_DMAMUX_INSTANCE_COUNT (1U) //!< Number of instances of the DMAMUX module.
#define REGS_DMAMUX_BASE (0x40021000U) //!< Base address for DMAMUX.
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_DMAMUX_CHCFGn - Channel Configuration register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_DMAMUX_CHCFGn - Channel Configuration register (RW)
 *
 * Reset value: 0x00U
 *
 * Each of the DMA channels can be independently enabled/disabled and associated with one of the DMA
 * slots (peripheral slots or always-on slots) in the system. Setting multiple CHCFG registers with
 * the same Source value will result in unpredictable behavior. Before changing the trigger or
 * source settings a DMA channel must be disabled via the CHCFGn[ENBL] bit.
 */
typedef union _hw_dmamux_chcfgn
{
    uint8_t U;
    struct _hw_dmamux_chcfgn_bitfields
    {
        uint8_t SOURCE : 6; //!< [5:0] DMA Channel Source (Slot)
        uint8_t TRIG : 1; //!< [6] DMA Channel Trigger Enable
        uint8_t ENBL : 1; //!< [7] DMA Channel Enable
    } B;
} hw_dmamux_chcfgn_t;
#endif

/*!
 * @name Constants and macros for entire DMAMUX_CHCFGn register
 */
//@{
//! @brief Number of instances of the DMAMUX_CHCFGn register.
#define HW_DMAMUX_CHCFGn_COUNT     (4U)

#define HW_DMAMUX_CHCFGn_ADDR(n)   (REGS_DMAMUX_BASE + 0x0U + (0x1U * (n)))

#ifndef __LANGUAGE_ASM__
#define HW_DMAMUX_CHCFGn(n)        (*(__IO hw_dmamux_chcfgn_t *) HW_DMAMUX_CHCFGn_ADDR(n))
#define HW_DMAMUX_CHCFGn_RD(n)     (HW_DMAMUX_CHCFGn(n).U)
#define HW_DMAMUX_CHCFGn_WR(n, v)  (HW_DMAMUX_CHCFGn(n).U = (v))
#define HW_DMAMUX_CHCFGn_SET(n, v) (BME_OR8(HW_DMAMUX_CHCFGn_ADDR, (uint8_t)(v)))
#define HW_DMAMUX_CHCFGn_CLR(n, v) (BME_AND8(HW_DMAMUX_CHCFGn_ADDR, (uint8_t)(~(v))))
#define HW_DMAMUX_CHCFGn_TOG(n, v) (BME_XOR8(HW_DMAMUX_CHCFGn_ADDR, (uint8_t)(v)))
#endif
//@}

/*
 * constants & macros for individual DMAMUX_CHCFGn bitfields
 */

/*! @name Register DMAMUX_CHCFGn, field SOURCE[5:0] (RW)
 *
 * Specifies which DMA source, if any, is routed to a particular DMA channel. See your device's chip
 * configuration details for information about the peripherals and their slot numbers.
 */
//@{
#define BP_DMAMUX_CHCFGn_SOURCE      (0U)      //!< Bit position for DMAMUX_CHCFGn_SOURCE.
#define BM_DMAMUX_CHCFGn_SOURCE      (0x3fU)  //!< Bit mask for DMAMUX_CHCFGn_SOURCE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the DMAMUX_CHCFGn_SOURCE field.
#define BR_DMAMUX_CHCFGn_SOURCE(n, v)   (BME_UBFX8(HW_DMAMUX_CHCFGn_ADDR(n), BP_DMAMUX_CHCFGn_SOURCE, 6))
#endif

//! @brief Format value for bitfield DMAMUX_CHCFGn_SOURCE.
#define BF_DMAMUX_CHCFGn_SOURCE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint8_t) << BP_DMAMUX_CHCFGn_SOURCE), uint8_t) & BM_DMAMUX_CHCFGn_SOURCE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SOURCE field to a new value.
#define BW_DMAMUX_CHCFGn_SOURCE(n, v)   (BME_BFI8(HW_DMAMUX_CHCFGn_ADDR(n), ((uint8_t)(v) << BP_DMAMUX_CHCFGn_SOURCE), BP_DMAMUX_CHCFGn_SOURCE, 6))
#endif
//@}

/*! @name Register DMAMUX_CHCFGn, field TRIG[6] (RW)
 *
 * Enables the periodic trigger capability for the triggered DMA channel.
 *
 * Values:
 * - 0 - Triggering is disabled. If triggering is disabled, and the ENBL bit is set, the DMA Channel will
 *     simply route the specified source to the DMA channel. (Normal mode)
 * - 1 - Triggering is enabled. If triggering is enabled, and the ENBL bit is set, the DMAMUX is in Periodic
 *     Trigger mode.
 */
//@{
#define BP_DMAMUX_CHCFGn_TRIG      (6U)      //!< Bit position for DMAMUX_CHCFGn_TRIG.
#define BM_DMAMUX_CHCFGn_TRIG      (0x40U)  //!< Bit mask for DMAMUX_CHCFGn_TRIG.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the DMAMUX_CHCFGn_TRIG field.
#define BR_DMAMUX_CHCFGn_TRIG(n, v)   (BME_UBFX8(HW_DMAMUX_CHCFGn_ADDR(n), BP_DMAMUX_CHCFGn_TRIG, 1))
#endif

//! @brief Format value for bitfield DMAMUX_CHCFGn_TRIG.
#define BF_DMAMUX_CHCFGn_TRIG(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint8_t) << BP_DMAMUX_CHCFGn_TRIG), uint8_t) & BM_DMAMUX_CHCFGn_TRIG)

#ifndef __LANGUAGE_ASM__
//! @brief Set the TRIG field to a new value.
#define BW_DMAMUX_CHCFGn_TRIG(n, v)   (BME_BFI8(HW_DMAMUX_CHCFGn_ADDR(n), ((uint8_t)(v) << BP_DMAMUX_CHCFGn_TRIG), BP_DMAMUX_CHCFGn_TRIG, 1))
#endif
//@}

/*! @name Register DMAMUX_CHCFGn, field ENBL[7] (RW)
 *
 * Enables the DMA channel.
 *
 * Values:
 * - 0 - DMA channel is disabled. This mode is primarily used during configuration of the DMA Mux. The DMA
 *     has separate channel enables/disables, which should be used to disable or re-configure a DMA
 *     channel.
 * - 1 - DMA channel is enabled
 */
//@{
#define BP_DMAMUX_CHCFGn_ENBL      (7U)      //!< Bit position for DMAMUX_CHCFGn_ENBL.
#define BM_DMAMUX_CHCFGn_ENBL      (0x80U)  //!< Bit mask for DMAMUX_CHCFGn_ENBL.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the DMAMUX_CHCFGn_ENBL field.
#define BR_DMAMUX_CHCFGn_ENBL(n, v)   (BME_UBFX8(HW_DMAMUX_CHCFGn_ADDR(n), BP_DMAMUX_CHCFGn_ENBL, 1))
#endif

//! @brief Format value for bitfield DMAMUX_CHCFGn_ENBL.
#define BF_DMAMUX_CHCFGn_ENBL(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint8_t) << BP_DMAMUX_CHCFGn_ENBL), uint8_t) & BM_DMAMUX_CHCFGn_ENBL)

#ifndef __LANGUAGE_ASM__
//! @brief Set the ENBL field to a new value.
#define BW_DMAMUX_CHCFGn_ENBL(n, v)   (BME_BFI8(HW_DMAMUX_CHCFGn_ADDR(n), ((uint8_t)(v) << BP_DMAMUX_CHCFGn_ENBL), BP_DMAMUX_CHCFGn_ENBL, 1))
#endif
//@}

//-------------------------------------------------------------------------------------------
// hw_dmamux_t - module struct
//-------------------------------------------------------------------------------------------
/*!
 * @brief All DMAMUX module registers.
 */
#ifndef __LANGUAGE_ASM__
#pragma pack(1)
typedef struct _hw_dmamux
{
    __IO hw_dmamux_chcfgn_t CHCFGn[4]; //!< [0x0] Channel Configuration register
} hw_dmamux_t;
#pragma pack()

//! @brief Macro to access all DMAMUX registers.
//! @return Reference (not a pointer) to the registers struct. To get a pointer to the struct,
//!     use the '&' operator, like <code>&HW_DMAMUX</code>.
#define HW_DMAMUX     (*(hw_dmamux_t *) REGS_DMAMUX_BASE)
#endif

#endif // __HW_DMAMUX_REGISTERS_H__
// v20/130417/1.2.4
// EOF
